/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package BMKCustomers;

import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;

/**
 *
 * @author BenMitnicK
 */
public class PasswordForm extends JFrame implements ActionListener{

    private static final SQLiteQueries connexion = new SQLiteQueries();
    
    /**
     * Creates new form PasswordForm
     */
    public PasswordForm() throws IOException {
        initComponents();
    }

    // Variables declaration               
    private final JButton jb_Help = new JButton();
    private final JButton jb_OK = new JButton();
    private final JLabel jl_PassWord = new JLabel();
    private JPasswordField passwordField = new JPasswordField(10);
    private static final String OK = "ok";
    private static final String HELP = "help";
    private JFrame controllingFrame; //needed for dialogs
    // End of variables declaration                   
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        URL url = ClassLoader.getSystemResource("images/icon.png");
        Image img = getToolkit().getImage(url);
        setIconImage(img);
        setTitle("BMKCustomers PassWord");
        setResizable(false);

        passwordField = new JPasswordField(10);
        passwordField.setActionCommand(OK);
        passwordField.addActionListener(this);
        
        jl_PassWord.setText("Enter Password");

        jb_OK.setText("OK");
        jb_OK.setActionCommand(OK);
        jb_OK.addActionListener(this);

        jb_Help.setText("Help");
        jb_Help.setActionCommand(HELP);
        jb_Help.addActionListener(this);

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jl_PassWord, GroupLayout.PREFERRED_SIZE, 91, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(passwordField, GroupLayout.PREFERRED_SIZE, 128, GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                    .addComponent(jb_Help, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jb_OK, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(jl_PassWord, GroupLayout.PREFERRED_SIZE, 22, GroupLayout.PREFERRED_SIZE)
                            .addComponent(passwordField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jb_OK)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jb_Help)))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        addWindowListener(new WindowAdapter() {
            public void windowActivated(WindowEvent e) {
                resetFocus();
            }
        });
        
        pack();
        setLocationRelativeTo(null);
    }                   

    
    
    //Must be called from the event dispatch thread.
    protected void resetFocus() {
        passwordField.requestFocusInWindow();
    }                                        

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PasswordForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PasswordForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PasswordForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PasswordForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new PasswordForm().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(PasswordForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    
    public void actionPerformed(ActionEvent e) {
        String cmd = e.getActionCommand();
        byte[] a = new byte[] {'[','B','@','1','f','f','8','8','c','3'};
        if (OK.equals(cmd)) { //Process the password.
            char[] input = passwordField.getPassword();
            try {
                if (isPasswordCorrect(input)) {
                    this.dispose();
                    new TabbedPane().createAndShowGUI();
                } else {
                    JOptionPane.showMessageDialog(this,
                            "Invalid password. Try again.",
                            "Error Message",
                            JOptionPane.ERROR_MESSAGE);
                }
            } catch (SQLException ex) {
                Logger.getLogger(PasswordForm.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(PasswordForm.class.getName()).log(Level.SEVERE, null, ex);
            } catch (URISyntaxException ex) {
                Logger.getLogger(PasswordForm.class.getName()).log(Level.SEVERE, null, ex);
            }
 
            //Zero out the possible password, for security.
            Arrays.fill(input, '0');
 
            resetFocus();
        } else { //The user has asked for help.
            JOptionPane.showMessageDialog(this, """
                If you have forgotten your password
                you will find it in the "Database".
                But it is up to you to find out
                how to access it.""");
        }
    }
 
    /**
     * Checks the passed-in array against the correct password.
     * After this method returns, you should invoke eraseArray
     * on the passed-in array.
     */
    private static boolean isPasswordCorrect(char[] input) throws SQLException {
        boolean isCorrect = true;
        ResultSet res = connexion.query("SELECT PassWordApp FROM AppOptions");
        char[] correctPassword = res.getString("PassWordApp").toCharArray();
 
        if (input.length != correctPassword.length) {
            isCorrect = false;
        } else {
            isCorrect = Arrays.equals (input, correctPassword);
        }
 
        //Zero out the password.
        Arrays.fill(correctPassword,'0');
 
        return isCorrect;
    }
    
}
